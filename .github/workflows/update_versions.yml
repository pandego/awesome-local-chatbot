name: Update Versions and Create Release

on:
  schedule:
    - cron: '0 0 * * *'  # Run daily at midnight UTC
  workflow_dispatch:  # Allow manual trigger

jobs:
  update-versions:
    runs-on: ubuntu-latest
    permissions:
      contents: write  # Needed for pushing commits and creating releases
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0  # Fetch all history for all tags and branches
          token: ${{ secrets.PAT }}
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests

      - name: Update versions
        id: update
        run: |
          import re
          import requests
          import os

          def get_latest_release(repo):
              url = f"https://api.github.com/repos/{repo}/releases/latest"
              response = requests.get(url)
              if response.status_code == 200:
                  return response.json()['tag_name'].lstrip('v')
              return None

          def update_env_file(file_path, key, value):
              with open(file_path, 'r') as file:
                  content = file.read()
              
              pattern = fr"{key}='.*?'"
              replacement = f"{key}='{value}'"
              updated_content = re.sub(pattern, replacement, content)
              
              with open(file_path, 'w') as file:
                  file.write(updated_content)

          ollama_version = get_latest_release('ollama/ollama')
          open_webui_version = get_latest_release('open-webui/open-webui')

          changes_made = False

          if ollama_version:
              update_env_file('default.env', 'OLLAMA_VERSION', ollama_version)
              print(f"Updated OLLAMA_VERSION to {ollama_version}")
              changes_made = True

          if open_webui_version:
              update_env_file('default.env', 'OPEN_WEBUI_VERSION', open_webui_version)
              print(f"Updated OPEN_WEBUI_VERSION to {open_webui_version}")
              changes_made = True

          with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
              f.write(f"versions_updated={'true' if changes_made else 'false'}\n")

          if changes_made:
              print("Versions were updated in default.env")
          else:
              print("No version updates were necessary")
        shell: python

      - name: Commit changes
        id: commit
        run: |
          git config --global user.name "${{ github.actor }}"
          git config --global user.email "${{ github.actor }}@users.noreply.github.com"
          git add default.env
          if git diff --quiet && git diff --staged --quiet; then
            echo "No changes to commit. No new release needed."
            echo "changes_made=false" >> $GITHUB_OUTPUT
          else
            git commit -m "[CONF] Update OLLAMA_VERSION and OPEN_WEBUI_VERSION"
            git push
            echo "Changes committed and pushed. Preparing for release."
            echo "changes_made=true" >> $GITHUB_OUTPUT
          fi

      - name: Get latest tag
        id: get_latest_tag
        run: |
          git fetch --tags
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "tag=$LATEST_TAG" >> $GITHUB_OUTPUT
          echo "Current latest tag: $LATEST_TAG"

      - name: Create new release
        if: steps.commit.outputs.changes_made == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          LATEST_TAG=${{ steps.get_latest_tag.outputs.tag }}
          MAJOR=$(echo $LATEST_TAG | cut -d. -f1 | tr -d 'v')
          MINOR=$(echo $LATEST_TAG | cut -d. -f2)
          PATCH=$(echo $LATEST_TAG | cut -d. -f3)
          NEW_TAG="v$MAJOR.$MINOR.$((PATCH+1))"
          
          echo "Creating new tag: $NEW_TAG"
          git tag $NEW_TAG
          git push origin $NEW_TAG
          
          echo "Creating new release: $NEW_TAG"
          gh release create $NEW_TAG -t "Release $NEW_TAG" -n "Automated release for version updates in default.env"
          
          echo "New release $NEW_TAG created successfully"
        
      - name: Echo release status
        run: |
          if [ "${{ steps.commit.outputs.changes_made }}" == "true" ]; then
            echo "A new release was created due to version updates."
          else
            echo "No release was created as no version updates were necessary."
          fi
